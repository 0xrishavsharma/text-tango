generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  refresh_token_expires_in Int?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  // color String
  Posts Post[]
}

model Post {
  id           String    @id @default(cuid()) @map("_id")
  slug         String    @unique
  title        String
  content      String
  img          String?
  views        Int       @default(0)
  categorySlug String
  category     Category  @relation(fields: [categorySlug], references: [slug])
  authorEmail  String
  author       User      @relation(fields: [authorEmail], references: [email])
  published    Boolean   @default(false)
  comments     Comment[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Comment {
  id          String   @id @default(cuid()) @map("_id")
  content     String
  authorEmail String
  author      User     @relation(fields: [authorEmail], references: [email])
  postSlug    String
  post        Post     @relation(fields: [postSlug], references: [slug])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
